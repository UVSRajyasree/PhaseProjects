package com.rentmycam.operations;

import java.util.List;
import java.util.Scanner;

import com.rentmycam.Camera;
import com.rentmycam.User;
import com.rentmycam.exceptions.InsufficientBalanceException;

public class CameraOperations {

	public static void listCameras(List<Camera> cameraList) {
		if(cameraList.isEmpty()) {
			System.out.println("No Data Present at This Moment. ");
		}else {
			//Display table header
			System.out.printf("%-10s%-20s%-20s%-15s%-15d\n", "CameraID", "Brand", "Model", "PerDayRent", "RentalStatus" );
			
			//Display camera Details in Table Format
			for (Camera camera : cameraList  ) {
				System.out.printf("%-10d%-20s%-20s%-15.2f%-15s\n",
				camera.getCameraId(), camera.getBrand(), camera.getModel(),
				camera.getPerDayRent(), camera.getRentalStatus());
				
			}
			//Can Use This Else Block If We Don't Want Details In Table Format
			 //else {
	           // System.out.println("Available Cameras for Rent:");
	           // for (Camera camera : cameraList) {
	            //    System.out.println(camera.getCameraId() + ". "
	            //            + camera.getBrand() + " " + camera.getModel()
	            //            + " - $" + camera.getPerDayRent() + " per day (Status: " + camera.getRentalStatus() + ")");
	           // }
		}
	}
	
	public static boolean rentCamera(User user, Camera camera) throws InsufficientBalanceException {
		if (user.getMyCameras().contains(camera)) {
			System.out.println("You already rented this camera. You cannot rent it again. ");
			return false;
		}
		
		if(user.getWalletBalance() < camera.getPerDayRent()) {
			throw new InsufficientBalanceException("Insufficient wallet amount. Please deposit funds.");
		}else {
			user.setWalletBalance(user.getWalletBalance() - camera.getPerDayRent());
			camera.setRentalStatus("Rented");
			user.addCamera(camera);
			System.out.println("Camera rented Successfully . INR " + camera.getPerDayRent() + "deducted from your wallet. ");
			return true;
		}
	}
	
	public static void viewWallet(User user) {
		System.out.println("Current Wallet Balance: INR" + user.getWalletBalance());
	}
	
	public static void depositAmount(User user,double amount) {
		user.setWalletBalance(user.getWalletBalance() + amount);
		System.out.println("Deposit of INR" + amount + "Successfull. New Wallet Balance: INR" + user.getWalletBalance());
	}
	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
